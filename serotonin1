#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
  #include <avr/power.h>
#endif

#define PIN 7 //outer structure
#define PIN2 12 //inner ring
#define PIN3 13 //single leds

//strip = outer structure
Adafruit_NeoPixel strip1 = Adafruit_NeoPixel(45, PIN, NEO_GRB + NEO_KHZ800);
//strip2 = inner ring
Adafruit_NeoPixel strip2 = Adafruit_NeoPixel(9, PIN2, NEO_GRB + NEO_KHZ800);
//strip3 = single leds
Adafruit_NeoPixel strip3 = Adafruit_NeoPixel(3, PIN3, NEO_GRB + NEO_KHZ800);

//define your colors here
uint32_t blue = strip1.Color(39,112,250);
uint32_t purple = strip1.Color(72,34,186);
uint32_t pink = strip1.Color(222,51,192);
uint32_t black = strip1.Color(0,0,0);
uint32_t white = strip1.Color(100,100,100);

void setup() {
  strip1.begin();
  strip1.fill(black, 0, strip1.numPixels());
  strip1.setBrightness(50);

  strip2.begin(); //inner ring
  strip2.fill(black, 0, strip2.numPixels());
  strip2.setBrightness(50);

  strip3.begin(); //single leds
  strip3.fill(black, 0, strip3.numPixels());
  strip3.setBrightness(50);

  strip1.show();
  strip2.show();
  strip3.show();
  Serial.begin(9600);
  while (! Serial);
}

// ===========================================
// * * * * * M A I N   L O O P S . * * * * * *
// ===========================================

// ***** MAIN LOOP *****
void loop() {
  patternCombo1();
  patternCombo1();
  patternCombo1();

  patternCombo3();
  patternCombo3();
  patternCombo3();
  patternCombo3();

  patternCombo2();

  patternCombo4();
  patternCombo4();
  patternCombo4();

  patternCombo5(10);

}

// ===========================================
// * * * * *   Individual Loops  . * * * * * *
// ===========================================


//first routine
// ===========================================
void patternCombo1() {
  //init
  byte wait = 10;
  int j1=0;
  byte offset = 100;
  byte pace = 10;
  byte paceTracker1 = 0;
  byte pos1 = 0;

  //loop
  do {
    rainbow(&strip1, &j1, &offset);
    theaterChase(&strip2, blue, &j1, pace, &paceTracker1, &pos1);
    strip3.fill(blue, 0, strip2.numPixels());
    strip3.show();
    //rainbow(&strip3, &j1, &offset);
    delay(wait);

    j1++;
  } while (j1<255);
}


//second routine
// ===========================================
void patternCombo2() {
  //init
  byte wait = 5;
  int j1=0;

  byte pace = 1;
  int steps = 3000;
  int pos = 0;
  byte offset = 0;

  //strip2.fill(blue, 0, strip2.numPixels());
  //strip2.show();
  
  //loop
  do {
    rainbowCycle(&strip1, &j1);
    colorShift(&strip2, white, black, steps, &pos, pace);
    colorShift(&strip3, white, black, steps, &pos, pace);

    delay(wait);

    j1++;
  } while (j1<256*5);
}


//Third routine
// ===========================================
void patternCombo3() {
  //init
  byte wait = 0;
  byte pace = 100;
  int j1=0;
  int j2=0;
  byte offset = 100;
  byte offset2 = 200;
  byte paceTracker1 = 0;
  byte paceTracker2 = 0;

  strip3.fill(blue, 0, strip2.numPixels());
  strip3.show();

  //loop
  do {
    theaterChaseRainbow(&strip1, &j1, pace, &paceTracker1);
    theaterChaseRainbow(&strip2, &j1, pace, &paceTracker2);

    delay(wait);

    j1++;
  } while (j1<256);
}


//Fourth routine
// ===========================================
void patternCombo4() {
  //init
  byte pace = 5;
  int steps = 255;
  int pos=0;

  strip1.fill(black, 0, strip1.numPixels());
  strip1.show();
  strip2.fill(black, 0, strip2.numPixels());
  strip2.show();
  strip3.fill(black, 0, strip3.numPixels());
  strip3.show();

  //loop - transformation
  pos = 0;
  do {
      colorShift(&strip1, black, blue, steps, &pos, pace);
  } while (pos<252);

  //loop - transformation
  pos = 0;
  do {
      colorShift(&strip1, blue, purple, steps, &pos, pace);
      colorShift(&strip2, black, pink, steps, &pos, pace);
      colorShift(&strip3, black, blue, steps, &pos, pace);
  } while (pos<252);

  //loop - transformation
  pos = 0;
  do {
      colorShift(&strip1, purple, pink, steps, &pos, pace);
      colorShift(&strip2, pink, blue, steps, &pos, pace);
      colorShift(&strip3, blue, purple, steps, &pos, pace);
  } while (pos<252);

  //loop - transformation
  pos = 0;
  do {
      colorShift(&strip1, pink, black, steps, &pos, pace);
      colorShift(&strip2, blue, black, steps, &pos, pace);
      colorShift(&strip3, purple, pink, steps, &pos, pace);
  } while (pos<252);

  //loop - transformation
  pos = 0;
  do {
      colorShift(&strip3, purple, black, steps, &pos, pace);
  } while (pos<252);
  
}


//Fifth routine
// ===========================================
void patternCombo5(int reps) {
  
  //init
  byte wait = 0;
  byte pace = 100;
  int j1=0;
  byte paceTracker1 = 0;

  for (byte r=0; r<reps; r++) {
    j1=0;
    paceTracker1 = 0;
    strip2.fill(blue, 0, strip2.numPixels());
    strip2.show();
    strip3.fill(blue, 0, strip3.numPixels());
    strip3.show();
  
    //loop
    do {
      theaterChaseRainbow(&strip1, &j1, pace, &paceTracker1);
  
      delay(wait);
  
      j1++;
    } while (j1<256);
  }
}


// ===========================================
// * * * * *   PATTERN FUNCTIONS . * * * * * *
// ===========================================

// ** Rainbow **
void rainbow(Adafruit_NeoPixel *strip, int *j, byte *offset) {
  byte new_j;
  if (*j + *offset > 255) {
    new_j = *j + *offset - 255;
  }
  else {
    new_j = *j + *offset;
  }
  for(byte i=0; i<strip->numPixels(); i++) {
   strip->setPixelColor(i, Wheel((i+new_j) & 255, strip));
  }
  strip->show();
}


// ** RainbowCycle **
void rainbowCycle(Adafruit_NeoPixel *strip, int *j) {
  uint16_t i;

  for(i=0; i< strip->numPixels(); i++) {
    strip->setPixelColor(i, Wheel(((i * 256 / strip->numPixels()) + *j) & 255, strip));
  }
  strip->show();
}


// ** TheatreChase **
void theaterChase(Adafruit_NeoPixel *strip, uint32_t color, int *j, byte pace, byte *paceTracker, byte *pos) {
  if (*paceTracker > pace) {
    *paceTracker = 0;
    for (byte i=0; i<strip->numPixels(); i++) {
      if (i % 3 == *pos) {
        strip->setPixelColor(i, color);
      }
      else {
        strip->setPixelColor(i, black);
      }
    }
    strip->show();
    if (*pos == 2) {
      *pos = 0;
    }
    else {
      *pos = *pos + 1;
    }
  }
  else {
  }
  *paceTracker = *paceTracker + 1;
}


// ** TheatreChaseRainbow **
void theaterChaseRainbow(Adafruit_NeoPixel *strip, int *j, byte pace, byte *paceTracker) {
  if (*paceTracker > pace) {
    *paceTracker = 0;

    for (int q=0; q < 3; q++) {
      for (uint16_t i=0; i < strip->numPixels(); i=i+3) {
        strip->setPixelColor(i+q, Wheel( (i+*j) % 255, strip));    //turn every third pixel on
      }
      strip->show();
      delay(pace);
      for (uint16_t i=0; i < strip->numPixels(); i=i+3) {
        strip->setPixelColor(i+q, 0);        //turn every third pixel off
      }
    }
  }
  else {
  }
  *paceTracker = *paceTracker + 1;
}


// ** ColorShift **
void colorShift(Adafruit_NeoPixel *strip, uint32_t startColor, uint32_t endColor, uint8_t numSteps, int *pos, byte pace) {
  
  int rIncrement, gIncrement, bIncrement;

  int rStart = clr(startColor, 'R');
  int rEnd = clr(endColor, 'R');
  int rNew = (*pos * (rEnd-rStart)/numSteps) + rStart;

  int gStart = clr(startColor, 'G');
  int gEnd = clr(endColor, 'G');
  int gNew = (*pos * (gEnd-gStart)/numSteps) + gStart;

  int bStart = clr(startColor, 'B');
  int bEnd = clr(endColor, 'B');
  int bNew = (*pos * (bEnd-bStart)/numSteps) + bStart;

  strip->fill(strip->Color(rNew, gNew, bNew), 0, strip->numPixels());
  strip->show();
  *pos = *pos + 1;
  if (*pos > numSteps) {
    *pos = 0;
  }
  delay(pace);
}


// ** Pulse **
void pulse(Adafruit_NeoPixel *strip, uint32_t startColor, uint32_t endColor, uint8_t numSteps, int *pos, byte pace) {
  int midway = numSteps/2;
  int pulsePos;
  if (*pos > midway) {
    pulsePos = *pos-midway;
  }
  else {
    pulsePos = *pos;
  }
  *pos = *pos + 1;
  
  colorShift(strip, black, white, numSteps, pulsePos, pace);
}


// * * * * * Helper Functions. * * * * * *
// =======================================

// Color Extractor: Extract R, G or B out of the neopixel color
uint8_t clr(uint32_t rgb, char whichColor) {
  switch(whichColor) {
    case 'R': return rgb >> 16; break;
    case 'G': return rgb >> 8;  break;
    case 'B': return rgb;
  }
}


// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos, Adafruit_NeoPixel *strip) {
  WheelPos = 255 - WheelPos;
  if(WheelPos < 85) {
    return strip->Color(255 - WheelPos * 3, 0, WheelPos * 3);
  }
  if(WheelPos < 170) {
    WheelPos -= 85;
    return strip->Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
  WheelPos -= 170;
  return strip->Color(WheelPos * 3, 255 - WheelPos * 3, 0);
}
