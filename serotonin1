#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
  #include <avr/power.h>
#endif

#define PIN 7 //outer structure
#define PIN2 12 //inner ring
#define PIN3 13 //single leds

//strip = outer structure
Adafruit_NeoPixel strip1 = Adafruit_NeoPixel(45, PIN, NEO_GRB + NEO_KHZ800);
//strip2 = inner ring
Adafruit_NeoPixel strip2 = Adafruit_NeoPixel(9, PIN2, NEO_GRB + NEO_KHZ800);
//strip3 = single leds
Adafruit_NeoPixel strip3 = Adafruit_NeoPixel(3, PIN3, NEO_GRB + NEO_KHZ800);

//define your colors here
uint32_t blue = strip1.Color(39,112,250);
//uint32_t purple = strip1.Color(87,33,182);
uint32_t purple = strip1.Color(72,34,186);
uint32_t pink = strip1.Color(222,51,192);
uint32_t black = strip1.Color(0,0,0);

void setup() {
  strip1.begin();
  strip1.fill(black, 0, strip1.numPixels());
  strip1.setBrightness(50);

  strip2.begin(); //inner ring
  strip2.fill(black, 0, strip2.numPixels());
  strip2.setBrightness(50);

  strip3.begin(); //single leds
  strip3.fill(black, 0, strip3.numPixels());
  strip3.setBrightness(50);

  strip1.show();
  strip2.show();
  strip3.show();
//  Serial.begin(9600);
//  while (! Serial);
}

// ===========================================
// * * * * * M A I N   L O O P S . * * * * * *
// ===========================================

// ***** MAIN LOOP *****
void loop() {
  patternCombo1();
  //patternCombo2();
  //patternCombo3();
  //patternCombo4();
}

// ===========================================
// * * * * *   Individual Loops  . * * * * * *
// ===========================================


//first routine
// ===========================================
void patternCombo1() {
  //init
  byte wait = 10;
  int j1=0;
  byte offset = 100;
  byte pace = 10;
  byte paceTracker1 = 0;
  byte pos1 = 0;

  //loop
  do {
    rainbow(&strip1, &j1, &offset);
    theaterChase(&strip2, blue, &j1, pace, &paceTracker1, &pos1);
    rainbow(&strip3, &j1, &offset);
    delay(wait);

    j1++;
  } while (j1<255);
}


//second routine
// ===========================================
void patternCombo2() {
  //init
  byte wait = 20;
  int j1=0;

  byte pace = 5;
  int steps = 5000;
  int pos = 0;
  byte offset = 0;

  strip2.fill(blue, 0, strip2.numPixels());
  strip2.show();
  
  //loop
  do {
    rainbowCycle(&strip1, &j1);
    //rainbow(&strip2, &j1, &offset);
    //rainbow(&strip3, &j1, &offset);
    //colorShift(&strip2, 1, purple, blue, steps, &pos, pace);
    //colorShift(&strip3, 1, purple, black, steps, &pos, pace);
    delay(wait);

    j1++;
  } while (j1<256*5);
}


//Third routine
// ===========================================
void patternCombo3() {
  //init
  byte wait = 20;
  byte pace = 50;
  int j1=0;
  byte offset = 100;
  byte offset2 = 200;
  byte paceTracker1 = 0;

  //define brightness variables for each strip initialize to 0
  byte b1=0;
  byte b2=0;
  byte b3=0;

  //loop
  do {
    theaterChaseRainbow(&strip1, &j1, pace, &paceTracker1);
    rainbow(&strip2, &j1, &offset);
    rainbow(&strip3, &j1, &offset2);
    delay(wait);

    j1++;
  } while (j1<256);
}


//Fourth routine
// ===========================================
void patternCombo4() {
  //init
  byte wait = 10;
  byte pace = 5;
  int steps = 5000;
  int pos = 0;
  int j1=0;

  //loop
  do {
      colorShift(&strip1, 1, blue, purple, steps, &pos, pace);
      colorShift(&strip2, 1, black, purple, steps, &pos, pace);
      colorShift(&strip3, 1, black, purple, steps, &pos, pace);
    j1++;
  } while (j1<steps);
}


// ===========================================
// * * * * *   PATTERN FUNCTIONS . * * * * * *
// ===========================================

// ** Rainbow **
void rainbow(Adafruit_NeoPixel *strip, int *j, byte *offset) {
  byte new_j;
  if (*j + *offset > 255) {
    new_j = *j + *offset - 255;
  }
  else {
    new_j = *j + *offset;
  }
  for(byte i=0; i<strip->numPixels(); i++) {
   strip->setPixelColor(i, Wheel((i+new_j) & 255, strip));
  }
  strip->show();
}


// ** RainbowCycle **
void rainbowCycle(Adafruit_NeoPixel *strip, int *j) {
  uint16_t i;

  for(i=0; i< strip->numPixels(); i++) {
    strip->setPixelColor(i, Wheel(((i * 256 / strip->numPixels()) + *j) & 255, strip));
  }
  strip->show();
}


// ** TheatreChase **
void theaterChase(Adafruit_NeoPixel *strip, uint32_t color, int *j, byte pace, byte *paceTracker, byte *pos) {
  if (*paceTracker > pace) {
    *paceTracker = 0;
    for (byte i=1; i<strip->numPixels(); i++) {
      if (i % 3 == *pos) {
        strip->setPixelColor(i, color);
      }
      else {
        strip->setPixelColor(i, black);
      }
    }
    strip->show();
    if (*pos == 2) {
      *pos = 0;
    }
    else {
      *pos = *pos + 1;
    }
  }
  else {
  }
  *paceTracker = *paceTracker + 1;
}


// ** TheatreChaseRainbow **
void theaterChaseRainbow(Adafruit_NeoPixel *strip, int *j, byte pace, byte *paceTracker) {
  if (*paceTracker > pace) {
    *paceTracker = 0;

    for (int q=0; q < 3; q++) {
      for (uint16_t i=0; i < strip->numPixels(); i=i+3) {
        strip->setPixelColor(i+q, Wheel( (i+*j) % 255, strip));    //turn every third pixel on
      }
      strip->show();
      delay(pace);
      for (uint16_t i=0; i < strip->numPixels(); i=i+3) {
        strip->setPixelColor(i+q, 0);        //turn every third pixel off
      }
    }
  }
  else {
  }
  *paceTracker = *paceTracker + 1;
}



// ** Pulse **
void pulse(Adafruit_NeoPixel *strip, byte *b, uint32_t clr) {
  if (*b++ > 254) {
    *b = 0;
  }
  strip->fill(clr, 0, strip->numPixels());
  for (byte i=0; i<=strip->numPixels(); i++) {
    strip->setPixelColor(i, 0, 0, *b);
    //strip->setBrightness(b);
    strip->show();
  }
}



// * * * * * Helper Functions. * * * * * *
// =======================================

void colorShift(Adafruit_NeoPixel *strip, byte led, uint32_t startColor, uint32_t endColor, uint8_t numSteps, int *pos, byte pace) {
  
  int rIncrement, gIncrement, bIncrement;

  int rStart = clr(startColor, 'R');
  int rEnd = clr(endColor, 'R');
  int rNew = (*pos * (rEnd-rStart)/numSteps) + rStart;

  int gStart = clr(startColor, 'G');
  int gEnd = clr(endColor, 'G');
  int gNew = (*pos * (gEnd-gStart)/numSteps) + gStart;

  int bStart = clr(startColor, 'B');
  int bEnd = clr(endColor, 'B');
  int bNew = (*pos * (bEnd-bStart)/numSteps) + bStart;
/*
  Serial.print("rNew ");
  Serial.print(rNew);
  Serial.print(" gNew ");
  Serial.print(gNew);
  Serial.print(" bNew ");
  Serial.println(bNew);
*/
  strip->fill(strip->Color(rNew, gNew, bNew), 0, strip->numPixels());
  strip->show();
  *pos = *pos + 1;
  if (*pos > numSteps) {
    *pos = 0;
  }
  delay(pace);
}

// Color Extractor: Extract R, G or B out of the neopixel color
uint8_t clr(uint32_t rgb, char whichColor) {
  switch(whichColor) {
    case 'R': return rgb >> 16; break;
    case 'G': return rgb >> 8;  break;
    case 'B': return rgb;
  }
}


// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos, Adafruit_NeoPixel *strip) {
  WheelPos = 255 - WheelPos;
  if(WheelPos < 85) {
    return strip->Color(255 - WheelPos * 3, 0, WheelPos * 3);
  }
  if(WheelPos < 170) {
    WheelPos -= 85;
    return strip->Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
  WheelPos -= 170;
  return strip->Color(WheelPos * 3, 255 - WheelPos * 3, 0);
}
